#!/usr/local/bin/perl -w

use strict;

############################################################
##
##  hw1b.prl < segment.data.train
##
############################################################

my @test_lines = ();    # the current line that we are testing
my @real_lines = ();    # the correct classification for the current line
my $numb_lines = 0;     # the number of lines in the block that we testing

my $line = undef;

my $file_name = "train_hw1b.arff";

unlink($file_name);

open( MYFILE, '>>', $file_name ) || die "Can't open file $file_name: $!";

&printHeader( \*MYFILE );

while ( defined( $line = <STDIN> ) ) {
	chomp $line;

	if ( $line =~ /^#BLANK#/ ) {
		if ($numb_lines) {
			my @feature_vector = &get_feature_vector;

			$" = ',';

			print MYFILE "@feature_vector[0..$#feature_vector]", "\n";

			@test_lines = ();    # make sure that we clear memory here or else
			@real_lines = ();    #  these arrays may hold old data which will
			$numb_lines = 0;     #  screw up calculations of their length
		}
	}

	else {

		( $test_lines[$numb_lines] ) = ( $line =~ m/^[^\t]+\t(.*)/ );
		( $real_lines[$numb_lines] ) = ( $line =~ m/^([^\t]+)\t/ );

		$numb_lines += 1;
	}
}

close(MYFILE);

##########################################################
## GET_FEATURE_VECTOR - creates a feature vector to be
##                      classified by logistic regression
##
##  The 14-dimensional feature vector consists of (in the
##  order of returned values) the following values: 
##  1. Number  : Score for how likely it is 'NNHEAD'
##  2. Number  : Score for how likely it is 'QUOTED'
##  3. Boolean : Current block belongs to 'TABLE'
##  4. Number  : Score for how likely it is 'ITEM'
##  5. Boolean : Current block belongs to 'SIG'
##  6. Number  : Score for how likely it is 'GRAPHIC'
##  7. Number  : Ratio: # Upper-case words / # Total
##  8. Boolean : Every line begins with whitespace
##  9. Number  : Maximum # of repeated special characters
## 10. Number  : # of period marks
## 11. Number  : Ratio: # Whitespaces / # Total
## 12. Boolean : Current block belongs to 'ADDRESS'
## 13. Boolean : Every line is indented by same length
## 14. Number  : Score for how likely it is 'PTEXT'
##
##  The true class label and full line of data are
##  returned along with the feature vector.
##########################################################

sub get_feature_vector() {
	my $headScore               = &head_detector;
	my $quoteScore              = &quoted_detector;
	my $tableScore              = &table_detector;
	my $itemScore               = &item_detector;
	my $sigScore                = &sig_detector;
	my $graphicScore            = &graphic_detector;
	my $uppercase_ratio         = &uppercase_ratio;
	my $begin_whitespace        = &begin_whitespace;
	my $continuous_special_char = &continuous_special_char;
	my $num_periods             = &num_periods;
	my $white_space_ratio       = &white_space_ratio;
	my $begin_alphabet          = &begin_alphabet;
	my $address_detector        = &address_detector;
	my $same_indent             = &same_indent;
	my $text_score              = &text_detector;

	return (
		$headScore,       $quoteScore,        $tableScore,
		$itemScore,       $sigScore,          $graphicScore,
		$uppercase_ratio, $begin_whitespace,  $continuous_special_char,
		$num_periods,     $white_space_ratio, $address_detector,
		$same_indent,     $text_score,        $real_lines[0]
	);
}

sub printHeader {
	my $MYFILE = $_[0];

	print {$MYFILE} "\@relation eos\n";

	print {$MYFILE} "\@attribute headScore numeric\n";
	print {$MYFILE} "\@attribute quoteScore numeric\n";
	print {$MYFILE} "\@attribute tableScore {0, 1}\n";
	print {$MYFILE} "\@attribute itemScore numeric\n";
	print {$MYFILE} "\@attribute sigScore {0, 1}\n";
	print {$MYFILE} "\@attribute graphicScore numeric\n";
	print {$MYFILE} "\@attribute uppercase_ratio numeric\n";
	print {$MYFILE} "\@attribute begin_whitespace {0, 1}\n";
	print {$MYFILE} "\@attribute continuous_special_char numeric\n";
	print {$MYFILE} "\@attribute num_periods numeric\n";
	print {$MYFILE} "\@attribute white_space_ratio numeric\n";
	print {$MYFILE} "\@attribute address_detector {0, 1}\n";
	print {$MYFILE} "\@attribute same_indent {0, 1}\n";
	print {$MYFILE} "\@attribute text_score numeric\n";
	print {$MYFILE}
"\@attribute class {NNHEAD, QUOTED, TABLE, ITEM, SIG, GRAPHIC, HEADL, ADDRESS, PTEXT}\n";
	print {$MYFILE} "\@data\n";

}

############################################################
## 'NNHEAD' detector
############################################################

sub head_detector {

	my $score = 0;
	my $cnt;

	# Assume header if multiple lines start with these keywords.
	# Indeed, with this form of regular expression, the logic
	# is vulnerable to cases where only one keyword is repeated
	# more than 10 times but these cases are highly unlikely.
	my $head_pattern = "^From:|^Article:|^Path:|^Newsgroups:|
    	^Subject:|^Date:|^Organization:|^Lines:|^Approved:|^Message-ID:|
    	^References:|^NNTP-Posting-Host:";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		if ( $test_lines[$cnt] =~ /$head_pattern/ ) {
			$score++;
		}
	}

	return $score;
}

############################################################
## 'QUOTED' detector
############################################################

sub quoted_detector {

	my $score  = 0;
	my $weight = 0.75;
	my $cnt;

	my $quote1 = ">";
	my $quote2 = ":";
	my $quote3 = "\\s*\\S*\\s*>";
	my $quote4 = "@";

	my $block_quote1 = "$quote1|$quote2|$quote3|$quote4";
	my $block_quote2 = "$quote1|$quote2";

	# the below regex will grab strings of the form
	#
	#   ">  some quote ... "
	#   ":  some quote ... "
	#   "|> some quote ... "
	#
	# as well as regex's of the form
	#
	#   ": > some quote ... "
	#   ">>> some quote ... "
	#   etc. ...

	my $test_quote1 = "^($block_quote1)(\\s*($block_quote2))*";
	my $test_quote2 = "^.+(wrote|writes|said|post):";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		if (   $test_lines[$cnt] =~ /$test_quote1/
			|| $test_lines[$cnt] =~ /$test_quote2/ )
		{
			$score++;
		}
	}

	return $score / ( scalar @test_lines );
}

############################################################
## 'SIG' detector
############################################################

sub sig_detector {
	if ( $test_lines[0] =~ "^--\\s*" ) {

		# If first line starts with "--" only
		return 1;
	}
	else {
		if ( scalar @test_lines <= 10 ) {

			# Assumes there are no 'SIG's that exceed 10 lines

			my $score     = 0;
			my $threshold = 10;
			my $cnt;

			my $normal_char = "[a-zA-Z0-9\\s]+";

			my $contiguous_special_chars = 0;

			for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
				$contiguous_special_chars = 0;
				my @chars = split( //, $test_lines[$cnt] );
				foreach my $c (@chars) {

				   # Check if there is contiguous sequence of special characters
					if ( $c =~ "$normal_char" ) {
						$contiguous_special_chars = 0;
					}
					else {
						$contiguous_special_chars++;
					}

					if ( $contiguous_special_chars > 10 ) {
						return 1;
					}
				}
			}

			return 0;
		}
		else {
			return 0;
		}
	}
}

############################################################
## Returns the maximum number of repeated special characters
############################################################

sub continuous_special_char {
	my $cnt;

	my $normal_char = "[a-zA-Z0-9\\s]+";

	my $continuous_special_char     = 0;
	my $max_continuous_special_char = 0;

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		$continuous_special_char = 0;
		my @chars = split( //, $test_lines[$cnt] );
		foreach my $c (@chars) {

			# Check if there is contiguous sequence of special characters
			if ( $c =~ "$normal_char" ) {
				if ( $continuous_special_char > $max_continuous_special_char ) {
					$max_continuous_special_char = $continuous_special_char;
				}
				$continuous_special_char = 0;
			}
			else {
				$continuous_special_char++;
			}
		}
	}

	return $max_continuous_special_char;
}

############################################################
## 'TABLE' detector
############################################################

sub table_detector {
	if ( scalar @test_lines > 2 ) {

		# There should be at least two lines

		my $score           = 0;
		my $prev_word_count = -1;
		my $cnt;

# Check if there are more than two lines with "more or less" same number of words
		for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
			my @words = split( ' ', $test_lines[$cnt] );
			my $word_count = scalar @words;

			if ( $prev_word_count == -1 ) {
				$prev_word_count = scalar $word_count;
			}
			else {
				if (   $prev_word_count - 1 < $word_count
					&& $word_count < $prev_word_count + 1 )
				{
					$score++;
				}
				else {
					$score           = 0;
					$prev_word_count = -1;
				}
			}

			if ( $score > 2 ) {

				# There are more than two lines -> table
				return 1;
			}
		}

		return 0;
	}
	else {

		# Otherwise it's unlikely
		return 0;
	}
}

############################################################
## 'GRAPHIC' detector
############################################################

sub graphic_detector {
	my $letter_count     = 0;
	my $non_letter_count = 0;
	my $cnt;

	my $normal_char = "[a-zA-Z0-9]";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		my @chars = split( //, $test_lines[$cnt] );
		foreach my $c (@chars) {
			if ( $c =~ "$normal_char" ) {
				$letter_count++;
			}
			else {
				$non_letter_count++;
			}
		}
	}

	return $non_letter_count / ( $letter_count + 0.00001 );
}

############################################################
## Ratio between number of words that start with upper case
## and total number of words
############################################################

sub uppercase_ratio {
	my $cnt;
	my $num_cap_words = 0;
	my $num_words     = 0;
	my $upper_case    = "^[0-9A-Z]";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {

		# Count how many words start in upper case or digit
		my @words = split( ' ', $test_lines[$cnt] );
		foreach my $word (@words) {
			if ( $word =~ "/$upper_case/" ) {
				$num_cap_words++;
			}
			$num_words++;
		}
	}

	return $num_cap_words / $num_words;
}

############################################################
## Checks whether every line begins with a whitespace
############################################################

sub begin_whitespace {
	my $cnt;
	my $num_white_lines = 0;
	my $white_space     = "^[\\s]{5,1000}.*";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {

		# Check how many lines start with a "large" white space.
		if ( $test_lines[$cnt] =~ "$white_space" ) {
			$num_white_lines++;
		}

	}

	if ( scalar @test_lines == $num_white_lines ) {

		# If every line starts with a large white space...
		return 1;
	}
	else {
		return 0;
	}
}

############################################################
## Counts the number of period marks
############################################################

sub num_periods {
	my $cnt;
	my $num_periods = 0;

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		my @chars = split( //, $test_lines[$cnt] );
		foreach my $c (@chars) {
			if ( $c eq "." ) {
				$num_periods++;
			}
		}
	}

	return $num_periods;
}

############################################################
## 'ITEM' detector
############################################################

sub item_detector {
	my $score        = 0;
	my $weight_score = 0.75;
	for ( my $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		if ( $test_lines[$cnt] =~ /^\t*\s*\-/ ) {
			$score++;
		}
		if ( $test_lines[$cnt] =~ /^\s*[0-9]\.\s|^\s*\([0-9]\)\s/ ) {
			$score += 10;
		}
	}
	return ( $score / scalar @test_lines >= $weight_score ) ? 1 : 0;
}

############################################################
## Checks whether every line is indented by same number
############################################################

sub same_indent {
	my @num_spaces  = ();
	my $equal_spaces = 1;
	for ( my $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		$num_spaces[ $#num_spaces + 1 ] = &indentation_length( $test_lines[$cnt] );
	}
	for ( my $i = 0 ; $i < ( scalar @num_spaces ) - 1 ; $i++ ) {
		if ( $num_spaces[$i] != $num_spaces[ $i + 1 ] ) {
			$equal_spaces = 0;
		}
	}
	return $equal_spaces;
}

############################################################
## Returns indentation length
############################################################

sub indentation_length {
	return length($_[0] =~ /(^\s+)/ ? $1 : "");
}

############################################################
## Ratio between number of whitespaces and non-whitespaces
############################################################

sub white_space_ratio {
	my $cnt;
	my $num_chars       = 0;
	my $num_white_space = 0;

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		my @chars = split( //, $test_lines[$cnt] );
		foreach my $c (@chars) {
			if ( $c =~ "\\s" ) {
				$num_white_space++;
			}
			$num_chars++;
		}
	}

	return $num_white_space / $num_chars;
}

############################################################
## Ratio between number of lines that start with an
## alphabet and those that do not
############################################################

sub begin_alphabet {
	my $cnt;

	my $counter = 0;

	my $pattern = "\\s+[a-zA-Z].*";

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		if ( $test_lines[$cnt] =~ "$pattern" ) {
			$counter++;
		}
	}

	return $counter / scalar @test_lines;
}

############################################################
## 'ADDRESS' detector
############################################################

sub address_detector {
	my $cnt;

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		if ( $test_lines[$cnt] =~ ".*[A-Z]{2}\\s+[0-9]+.*" ) {
			return 1;
		}
		if ( $test_lines[$cnt] =~ ".*[0-9]{3,5}-[0-9]{3,5}.*" ) {
			return 1;
		}
		if ( $test_lines[$cnt] =~ ".*mail:.*@.*" ) {
			return 1;
		}
	}

	return 0;
}

############################################################
## 'PTEXT' detector
############################################################

sub text_detector {
	if (&quoted_detector || &item_detector) {
		return 0;
	}
	
	my $cnt;
	my $num_text_lines = 0;
	my $char_counter = 0;
	my $line_started = 0;
	my $white_space_counter = 0;

	for ( $cnt = 0 ; $cnt < scalar @test_lines ; $cnt++ ) {
		$char_counter = 0;
		my @chars = split( //, $test_lines[$cnt] );
		foreach my $c (@chars) {
			if ( $c =~ "\\s" ) {
				$white_space_counter++;
			} else {
				$white_space_counter = 0;
				$line_started = 1;
			}
			if ($line_started) {
				if ($white_space_counter > 2) {
					return 0;
				}
				$char_counter++;
			} 
		}
		if ($char_counter > 65) {
			$num_text_lines++;
		}
	}

	return $num_text_lines / scalar @test_lines;
}
